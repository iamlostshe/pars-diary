"""–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.

- –í–∫–ª./–û—Ç–∫–ª—é—á–∏—Ç—å. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
- –í–∫–ª./–û—Ç–∫–ª—é—á–∏—Ç—å. —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–í–∫–ª./–û—Ç–∫–ª—é—á–∏—Ç—å.)
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–í–∫–ª./–û—Ç–∫–ª—é—á–∏—Ç—å.)
"""

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from pars_diary.keyboards import not_auth_keyboard
from pars_diary.messages import not_auth
from pars_diary.parser.db import NotifyStatus, UsersDataBase

router = Router(name="Notify settings")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# =========

_SMART_NOTIFY = (
    "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>:\n\n"
    "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n"
    "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–æ–∫\n"
    "üîî <b>–£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>* - [–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ] "
    "—É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ü–µ–Ω–æ–∫ "
    "–∏ –ø—Ä–æ—Å—Ç—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
    "<blockquote>–°–ø–æ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ,"
    "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –∏–Ω–∞—á–µ –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏ 4!\n\n"
    "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /notify\n"
    "</blockquote>\n"
    "–∏–ª–∏\n\n"
    "<blockquote>–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤—Å–µ–≥–æ 0.25 "
    "–±–∞–ª–ª–∞ –¥–æ –æ—Ü–µ–Ω–∫–∏ 5, —Å—Ç–æ–∏—Ç –ø–æ—Å—Ç–∞—Ä–∞—Ç—å—Å—è!\n"
    "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /notify\n"
    "</blockquote>"
)


def _notify_markup(status: NotifyStatus) -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            InlineKeyboardButton(
                text="üîî –û—Ü–µ–Ω–∫–∏" if status.notify else "üîï –û—Ü–µ–Ω–∫–∏",
                callback_data="n_n",
            ),
            InlineKeyboardButton(
                text="üîî –£–º–Ω—ã–µ" if status.smart else "üîï –£–º–Ω—ã–µ",
                callback_data="n_s",
            ),
            [
                InlineKeyboardButton(
                    text="üîî –í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏", url="https://t.me/mili_sp_bot"
                )
            ],
        ]
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# ==================


@router.message(Command("notify"))
async def notify_settings(msg: Message, db: UsersDataBase) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    if db.get_cookie(msg.from_user.id) is None:
        await msg.answer(not_auth(), reply_markup=not_auth_keyboard())
        return

    notify = db.get_notify(Message.from_user.id)
    await msg.answer(_SMART_NOTIFY, reply_markup=_notify_markup(notify))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
# ==================


@router.callback_query(F.data == "n_n")
async def call_set_notify(query: CallbackQuery, db: UsersDataBase) -> None:
    """–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—Å–µ callback –∫–Ω–æ–ø–∫–∏."""
    notify = db.get_notify(query.from_user.id)
    notify = db.set_notify(
        query.from_user.id, NotifyStatus(not notify.notify, notify.smart)
    )
    await query.message.answer(
        _SMART_NOTIFY, reply_markup=_notify_markup(notify)
    )


@router.callback_query(F.data == "n_s")
async def call_set_smart_notify(
    query: CallbackQuery, db: UsersDataBase
) -> None:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    notify = db.get_notify(query.from_user.id)
    notify = db.set_notify(
        query.from_user.id, NotifyStatus(notify.notify, not notify.smart)
    )
    await query.message.answer(
        _SMART_NOTIFY, reply_markup=_notify_markup(notify)
    )
