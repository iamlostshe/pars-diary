"""–ú–æ–¥—É–ª—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞."""

from __future__ import annotations

import datetime as dt
import json
import re

import requests
from loguru import logger

from . import demo_data
from .exceptions import (
    MyTimeoutError,
    UnexpectedStatusCodeError,
    UserNotAuthenticatedError,
    ValidationError,
)

# –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ –¥–Ω–µ–≤–Ω–∏–∫–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö
AGGREGATOR_URL = "http://aggregator-obr.bars-open.ru/my_diary"

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ <span>
SPAN_CLEANER = r"<span[^>]*>(.*?)</span>"

# –ú–∞—Ä–∫–µ—Ä—ã, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–ª–ª–∞
COLOR_MARKERS = "üü•üü•üü•üüßüü®üü©"

# –û—Ü–µ–Ω–∫–∞, –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ
MARK_STR_TO_FLOAT = {
    "5-": 4.5,
    "4+": 4.5,
    "4-": 3.5,
    "3+": 3.5,
    "3-": 2.5,
    "2+": 2.5,
}

# –°–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —É—Ä–æ–∫–æ–≤
MINIFY_LESSON_TITLE = {
    "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)": "–ê–Ω–≥–ª. –Ø–∑.",
    "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π": "–ê–Ω–≥–ª. –Ø–∑.",
    "–ò–∑–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ": "–ò–ó–û",
    "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞": "–§–∏–∑-—Ä–∞",
    "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "–õ–∏—Ç–µ—Ä.",
    "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è": "–¢–µ—Ö–Ω.",
    "–¢—Ä—É–¥ (—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è)": "–¢–µ—Ö–Ω.",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": "–ò–Ω—Ñ–æ—Ä–º.",
    "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ": "–û–±—â–µ—Å—Ç–≤.",
    "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫": "–†—É—Å. –Ø–∑.",
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "–ú–∞—Ç–µ–º.",
    "–û—Å–Ω–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—ã –†–æ–¥–∏–Ω—ã": "–û–ë–ó–†",
    "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": "–¢–µ–æ—Ä. –í–µ—Ä.",
    "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç": "–ò–Ω–¥. –ø—Ä.",
    '–§–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤ "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å"': "–§—É–Ω–∫. –ì—Ä.",
    '–§–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤ "–û—Å–Ω–æ–≤—ã 1–° –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ"': "–§–∞–∫. 1–°",
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_regions() -> dict:
    """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã."""
    r = requests.get(AGGREGATOR_URL, timeout=20)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –≤–µ—Ä–Ω—É–ª —Å–µ—Ä–≤–µ—Ä
    if r.status_code != 200:
        raise UnexpectedStatusCodeError(r.status_code)

    data = r.json()
    result = {}

    if data.get("success") and data.get("data"):
        for region in r.json()["data"]:
            name = region.get("name")
            url = region.get("url")
            if name and url:
                if url[-1] == "/":
                    url = url[:-1]
                result[name] = url
            else:
                # TODO @iamlostshe: –°–¥–µ–ª–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                raise UnexpectedStatusCodeError(data.get("success"))
        return result
    # TODO @iamlostshe: –°–¥–µ–ª–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    raise UnexpectedStatusCodeError(data.get("success"))


def request(
        url: str,
        user_id: str | int,
    ) -> dict | str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ url."""
    from . import db

    try:
        # –ü–æ–ª—É—á–∞–µ–º cookie –∏–∑ json –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cookie = db.get_cookie(user_id)

        if cookie in ["demo", "–¥–µ–º–æ"]:
            return "demo"

        # –ü–æ–ª—É—á–∞–µ–º server_name –∏–∑ –±–¥
        server_name = db.get_server_name(user_id)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º url
        url = server_name + url

        # –û—Ç–ø—Ä–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        headers = {"cookie": cookie}
        r = requests.post(url, headers=headers, timeout=20)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∞–µ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
        if "Server.UserNotAuthenticatedError" in r.text:
            raise UserNotAuthenticatedError

        if "Client.ValidationError" in r.text:
            raise ValidationError

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –≤–µ—Ä–Ω—É–ª —Å–µ—Ä–≤–µ—Ä
        if r.status_code != 200:
            raise UnexpectedStatusCodeError(r.status_code)

        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫
        # –§–∏–ª—å—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        text = re.sub(SPAN_CLEANER, r"\1", r.text.replace("\u200b", ""))

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ json
        data = json.loads(text)

        # –í—ã–≤–æ–¥–∏–º –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logger.debug(data)

    except requests.exceptions.Timeout as e:
        raise MyTimeoutError from e

    else:
        return data


def check_cookie(cookie: str, server_name: str | None = None) -> tuple[bool, str]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ cookie."""
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ–≤–µ—Ä—Å–∏—è
    if cookie in ["demo", "–¥–µ–º–æ"]:
        return True, (
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –æ–¥–Ω–∞–∫–æ —É—á—Ç–∏—Ç–µ, —á—Ç–æ "
            "–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –¥–ª—è "
            "–≤–∞—Å –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
        )

    # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã
    if "sessionid=" not in cookie:
        return False, '–í–∞—à–∏ cookie –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å "sessionid="'
    if "sessionid=xxx..." in cookie:
        return False, "–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä"
    if not server_name:
        return False, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω -> /start"

    # –¢–µ—Å—Ç –ø—É—Ç–µ–º –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
    headers = {"cookie": cookie}
    r = requests.get(
        f"{server_name}/api/ProfileService/GetPersonData",
        headers=headers,
        timeout=20,
    )

    logger.debug(r.json())

    if r.status_code == 200:
        return True, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."
    return False, (
        "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã cookie, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∏ "
        f"—É—Å—Ç–∞—Ä–µ–ª–∏ (—Å–µ—Ä–≤–µ—Ä –≤—ã–¥–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç - {r.status_code})"
    )


def get_space_len(child: str, parent: dict) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª-–≤–æ —Å–∏–º–æ–≤–ª–æ–≤, –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤."""
    try:
        return max(len(MINIFY_LESSON_TITLE.get(
            s[child], s[child],
        )) for s in parent) + 1
    except ValueError:
        return 0


# –ö–ª–∞—Å—Å —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
class Pars:
    """–ü–∞—Ä—Å–∏–Ω–≥."""

    def me(self, user_id: str | int) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
        url = "/api/ProfileService/GetPersonData"
        data = request(url, user_id)

        if data == "demo":
            return demo_data.me()

        if not data.get("children_persons"):
            # Logged in on children account
            sex = "–ú—É–∂—Å–∫–æ–π" if data["user_is_male"] else "–ñ–µ–Ω—Å–∫–∏–π"

            return (
                f"–§–ò–û - {data['user_fullname']}\n"
                f"–ü–æ–ª - {sex}\n"
                f"–®–∫–æ–ª–∞ - {data['selected_pupil_school']}\n"
                f"–ö–ª–∞—Å—Å - {data['selected_pupil_classyear']}"
            )

        # Logged in on parent account
        msg_text = ""

        # Parent data
        msg_text += f"–§–ò–û (—Ä–æ–¥–∏—Ç–µ–ª—è) - {data['user_fullname']}\n"

        # –ù–æ–º–µ—Ä–∞ –º–æ–∂–µ—Ç –∏ –Ω–µ –±—ã—Ç—å
        number = data.get("phone")

        if number:
            msg_text += f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {number}"

        for n, i in enumerate(data["children_persons"]):
            name = " ".join(i["fullname"].split()[:-1])
            dr = i["fullname"].split()[-1]
            school = i["school"]
            classyear = i["classyear"]

            msg_text += (
                f"\n\n{n + 1} —Ä–µ–±–µ–Ω–æ–∫:\n\n"
                f"–§–ò–û - {name}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è - {dr}\n"
                f"–®–∫–æ–ª–∞ - {school}\n–ö–ª–∞—Å—Å - {classyear}"
            )

        return msg_text

    def events(self, user_id: str | int) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≤–µ–Ω—Ç–∞—Ö."""
        url = "/api/WidgetService/getEvents"
        data = request(url, user_id)

        if data == "demo":
            return demo_data.events()

        if not data:
            return "–ö–∞–∂–µ—Ç—Å—è, –∏–≤–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–º–µ—á–∞–µ—Ç—Å—è)"

        return f"{data}"

    def birthdays(self, user_id: str | int) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è."""
        url = "/api/WidgetService/getBirthdays"
        data = request(url, user_id)

        if data == "demo":
            return demo_data.birthdays()

        if not data:
            return "–ö–∞–∂–µ—Ç—Å—è, –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–º–µ—á–∞–µ—Ç—Å—è)"

        return f"{data[0]['date'].replace('-', ' ')}\n{data[0]['short_name']}"

    def marks(self, user_id: str | int) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ü–µ–Ω–∫–∞—Ö."""
        url = f"/api/MarkService/GetSummaryMarks?date={dt.datetime.now().date()}"
        data = request(url, user_id)

        if data == "demo":
            return demo_data.marks()

        if not data.get("discipline_marks"):
            return (
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ü–µ–Ω–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"
                "–ö–∞–∂–µ—Ç—Å—è, –≤–∞–º –ø–æ–∫–∞ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π("
            )

        msg_text = ""
        for_midle_marks = []

        space_len = get_space_len("discipline", data["discipline_marks"])

        for subject in data["discipline_marks"]:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            g = MINIFY_LESSON_TITLE.get(
                subject["discipline"], subject["discipline"],
            ).ljust(space_len)

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
            marks = []
            str_marks = []

            for m in subject["marks"]:
                mm = m["mark"]
                str_marks.append(mm)
                try:
                    marks.append(float(mm))
                except ValueError:
                    marks.append(MARK_STR_TO_FLOAT[mm])

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ (—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ) —Å—Ä–µ–¥–Ω–∏–µ –±—ã–ª–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º,
            # –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∏–Ω–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω—É–ª–∏.
            len_marks = len(marks)
            average_mark = f"{sum(marks) / len_marks:.2f}" if len_marks else "0.00"
            float_average_mark = float(average_mark)

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –≤ —Å–ø–∏—Å–æ–∫
            # –¥–ª—è —Ä–∞—Å—Å—á—ë—Ç–∞ –æ–±—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞
            for_midle_marks.append(float_average_mark)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–ª–ª–∞
            color_mark = COLOR_MARKERS[round(float_average_mark)]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg_text += (
                f"{color_mark} {g}‚îÇ {average_mark} ‚îÇ "
                f"{' '.join(str_marks)}\n"
            )

        msg_text += (
            "\n–û–±—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª (—Ä–∞—Å—Å–∏—á–∏—Ç–∞–Ω): "
            f"{sum(for_midle_marks) / len(for_midle_marks):.2f}"
        )

        return f"–û—Ü–µ–Ω–∫–∏:\n\n<pre>{msg_text}</pre>"

    def i_marks(self, user_id: str | int) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö."""
        url = "/api/MarkService/GetTotalMarks"
        data = request(url, user_id)

        if data == "demo":
            return demo_data.i_marks()

        if not data.get("discipline_marks"):
            return (
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"
                "–ö–∞–∂–µ—Ç—Å—è, –≤–∞–º –ø–æ–∫–∞ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π("
            )

        subperiods = {i["code"]:i["name"] for i in data["subperiods"]}

        subperiods_names = list(subperiods.values())
        len_subperiods_names = len(subperiods_names)

        subperiods_names_first_letter = [i[0] for i in subperiods_names]

        explanation = [
            f"{subperiods_names_first_letter[i]} - {subperiods_names[i]}"\
            for i, _ in enumerate(subperiods_names)
        ]

        msg_text = (
            f'–ò—Ç–æ–≥–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏:\n\n{"\n".join(explanation)}\n\n<pre>\n'
            f'–ü—Ä–µ–¥–º–µ—Ç    ‚îÇ {" | ".join(subperiods_names_first_letter)} |\n'
            f'‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº{("‚îÄ‚îÄ‚îÄ‚îº" * len_subperiods_names)[:-1]}‚î§\n'
        )

        subperiod_index = list(subperiods.keys())
        space_len = get_space_len("discipline", data["discipline_marks"])

        for discipline in data["discipline_marks"]:
            stroka = list("-" * len_subperiods_names)
            g = MINIFY_LESSON_TITLE.get(
                discipline["discipline"], discipline["discipline"],
            ).ljust(space_len)

            msg_text += f"{g} ‚îÇ "

            for period_mark in discipline["period_marks"]:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                if period_mark["subperiod_code"] in subperiod_index:
                    stroka[subperiod_index.index(period_mark["subperiod_code"])] = (
                        period_mark["mark"]
                    )

            msg_text += f"{' ‚îÇ '.join(stroka)}"

            msg_text += " ‚îÇ\n"

        return f"{msg_text}</pre>"
