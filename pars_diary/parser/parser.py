"""–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –¥–Ω–µ–≤–Ω–∏–∫–∞.

TODO @milinuri: –î–µ–∫–æ–º–ø–æ–∑–∏—Ä—É–π –ª–æ–≥–∏–∫—É, –æ—Ç–¥–µ–ª—å–Ω–æ –ø–∞—Ä—Å–µ—Ä (bars-api),
–æ—Ç–¥–µ–ª—å–Ω–æ —Å–±–æ—Ä—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å—Å—è –∫ –±–æ—Ç—É, –∞ –Ω–∞–ø—Ä–∏–º–µ—Ä –≤ –±—É–¥—É—â–µ–º —Å–¥–µ–ª–∞—Ç—å webapp.
"""

import json
import re
from datetime import UTC, datetime

import aiohttp
from loguru import logger

from pars_diary.parser import exceptions
from pars_diary.parser.db import User
from pars_diary.services import demo

# –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ –¥–Ω–µ–≤–Ω–∏–∫–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö
AGGREGATOR_URL = "http://aggregator-obr.bars-open.ru/my_diary"

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ <span>
SPAN_CLEANER = re.compile(r"<span[^>]*>(.*?)</span>")

# –ú–∞—Ä–∫–µ—Ä—ã, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–ª–ª–∞
# TODO @milinuri: –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –≤ –≤–∏–¥–µ –¥–∞—Ç–∞–∫–ª–∞—Å—Å–∞?
COLOR_MARKERS = "üü•üü•üü•üüßüü®üü©"

# –°–æ–∫—Ä–∞—â–µ–Ω–∏—è –¥–ª—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤
_SHORT_LESSONS = {
    "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)": "–ê–Ω–≥–ª. –Ø–∑.",
    "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞": "–§–∏–∑-—Ä–∞",
    "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "–õ–∏—Ç–µ—Ä.",
    "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è": "–¢–µ—Ö–Ω.",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": "–ò–Ω—Ñ–æ—Ä–º.",
    "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ": "–û–±—â–µ—Å—Ç–≤.",
    "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫": "–†—É—Å. –Ø–∑.",
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "–ú–∞—Ç–µ–º.",
    "–û—Å–Ω–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—ã –†–æ–¥–∏–Ω—ã": "–û–ë–ó–†",
    "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": "–¢–µ–æ—Ä. –í–µ—Ä.",
    "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç": "–ò–Ω–¥. –ø—Ä.",
    '–§–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤ "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å"': "–§—É–Ω–∫. –ì—Ä.",
    '–§–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤ "–û—Å–Ω–æ–≤—ã 1–° –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ"': "–§–∞–∫. 1–°",
}


class DiaryParser:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–Ω–µ–≤–Ω–∏–∫–æ–º.

    –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≤–∏–¥–µ –≥–æ—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞.
    """

    def __init__(self) -> None:
        self._session: aiohttp.ClientSession | None = None

    # –†–∞–±–æ—Ç–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
    # ====================

    async def connect(self) -> None:
        """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é AioHttp."""
        self._session = aiohttp.ClientSession()

    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é."""
        await self._session.close()

    async def _request(
        self,
        url: str,
        method: str | None = "get",
        headers: dict[str, str] | None = None,
        cookies: dict[str, str] | None = None,
    ) -> dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –¥–Ω–µ–≤–Ω–∏–∫—É."""
        if self._session is None:
            err = "Inactive session. Before using parser you need to connect"
            raise exceptions.DiaryParserError(err) from None

        try:
            res = await self._session.request(
                method, url, timeout=20, headers=headers, cookies=cookies
            )
        except aiohttp.client_exceptions.ServerTimeoutError as e:
            raise exceptions.ParseTimeoutError from e

        # –û–±—Ä–∞—Ç–∏–º –≤–Ω–∏–º–∞–Ω–∏–µ —á—Ç–æ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –¥—Ä—É–≥–æ–π –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∫–æ–¥ (301)
        # –¢–æ –æ–Ω —Ç–æ–∂–µ –≤–µ—Ä–Ω—ë—Ç—Å—è –∫–∞–∫ –æ—à–∏–±–∫–∞
        if res.status != 200:  # noqa: PLR2004
            raise exceptions.UnexpectedStatusCodeError(res.status) from None

        # TODO @milinuri: –¢—É—Ç –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        # –ù—É –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –≤—Å—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        res_text = (await res.read()).replace("\u200b", "").strip()
        res_text = SPAN_CLEANER.sub(r"\1", res_text)

        return json.loads(res_text)

    async def _user_request(self, method: str, url: str, user: User) -> dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –æ—Ç –ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return await self._request(
            method, user.server_name + url, headers={"cookie": user.cookie}
        )

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    # ======================

    async def get_regions(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã."""
        data = await self._request(AGGREGATOR_URL)
        if data.get("success") is None or data.get("data") is None:
            raise exceptions.ValidationError

        res = {}
        for region in data["data"]:
            name = region.get("name")
            url = region.get("url")
            if name is None or url is None:
                raise exceptions.ValidationError
            res[name] = url.strip("/")

        return res

    async def check_cookie(
        self, cookie: str, server_name: str | None = None
    ) -> tuple[bool, str]:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ cookie."""
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ–≤–µ—Ä—Å–∏—è
        if cookie == "demo":
            return True, (
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n"
                "–æ–¥–Ω–∞–∫–æ —É—á—Ç–∏—Ç–µ, —á—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç "
                "–Ω–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.\b"
                "–í–∞–º –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
            )

        # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã
        if "sessionid=" not in cookie:
            return False, '–í–∞—à–∏ cookie –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å "sessionid="'
        if "sessionid=xxx..." in cookie:
            return False, "–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä"
        if server_name is None:
            return False, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω -> /start"

        # –¢–µ—Å—Ç –ø—É—Ç–µ–º –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
        res = await self._request(
            f"{server_name}/api/ProfileService/GetPersonData",
            headers={"cookie": cookie},
        )
        logger.debug(res)
        return True, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –¥–Ω–µ–≤–Ω–∏–∫–æ–º
    # ==================================

    async def me(self, user: User) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
        if user.cookie == "demo":
            data = demo.me()
        else:
            data = await self._user_request(
                "post", "/api/ProfileService/GetPersonData", user
            )

        if not data.get("children_persons"):
            # Logged in on children account
            sex = "–ú—É–∂—Å–∫–æ–π" if data["user_is_male"] else "–ñ–µ–Ω—Å–∫–∏–π"

            return (
                f"–§–ò–û - {data['user_fullname']}\n"
                f"–ü–æ–ª - {sex}\n"
                f"–®–∫–æ–ª–∞ - {data['selected_pupil_school']}\n"
                f"–ö–ª–∞—Å—Å - {data['selected_pupil_classyear']}"
            )

        msg_text = f"–§–ò–û (—Ä–æ–¥–∏—Ç–µ–ª—è) - {data['user_fullname']}\n"

        number = data.get("phone")
        if number:
            msg_text += f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {number}"

        for n, i in data["children_persons"]:
            name = " ".join(i["fullname"].split(" ")[0:-1])
            dr = i["fullname"].split(" ")[-1]
            school = i["school"]
            class_year = i["classyear"]

            msg_text += (
                f"\n\n{n + 1} —Ä–µ–±–µ–Ω–æ–∫:\n\n"
                f"–§–ò–û - {name}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è - {dr}\n"
                f"–®–∫–æ–ª–∞ - {school}\n–ö–ª–∞—Å—Å - {class_year}"
            )

        return msg_text

    async def events(self, user: User) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö."""
        if user.cookie == "demo":
            data = demo.events()
        else:
            data = await self._user_request(
                "post", "/api/WidgetService/getEvents", user
            )

        if len(data) == 0:
            return "–ö–∞–∂–µ—Ç—Å—è, —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–º–µ—á–∞–µ—Ç—Å—è)"

        return f"{data}"

    async def birthdays(self, user: User) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è."""
        if user.cookie == "demo":
            data = demo.birthdays()
        else:
            data = await self._user_request(
                "post", "/api/WidgetService/getBirthdays", user
            )

        if len(data) == 0:
            return "–ö–∞–∂–µ—Ç—Å—è, –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–º–µ—á–∞–µ—Ç—Å—è)"

        return f"{data[0]['date'].replace('-', ' ')}\n{data[0]['short_name']}"

    def marks(self, user: User) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ü–µ–Ω–∫–∞—Ö."""
        if user.cookie == "demo":
            data = demo.marks()
        else:
            today = datetime.now(tz=UTC).date()
            data = self._user_request(
                "POST", f"/api/MarkService/GetSummaryMarks?date={today}", user
            )

        if not data.get("discipline_marks"):
            return (
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ü–µ–Ω–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"
                "–ö–∞–∂–µ—Ç—Å—è, –≤–∞–º –ø–æ–∫–∞ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π("
            )

        message = ""
        user_av_marks = []
        for subject in data["discipline_marks"]:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            d = _SHORT_LESSONS.get(subject["discipline"], subject["discipline"])
            marks = [int(m["mark"]) for m in subject["marks"]]

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ (—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ) —Å—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º,
            # –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∏–Ω–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω—É–ª–∏.
            av_marks = round(sum(marks) / len(marks), 2) if len(marks) > 0 else 0.0

            user_av_marks.append(av_marks)
            av_color = COLOR_MARKERS[round(av_marks)]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            marks_line = " ".join([str(m) for m in marks])
            message += f"{av_color} {d:10}‚îÇ {av_marks} ‚îÇ {marks_line}\n"

        message += (
            f"\n–û–±—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {sum(user_av_marks) / len(user_av_marks):.2f}"
        )

        return f"–û—Ü–µ–Ω–∫–∏:\n\n<pre>{message}</pre>"

    def i_marks(self, user: User) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö."""
        if user.cookie == "demo":
            data = demo.i_marks()

        else:
            data = self._user_request("post", "/api/MarkService/GetTotalMarks", user)

        if data.get("discipline_marks") is None:
            return (
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"
                "–ö–∞–∂–µ—Ç—Å—è, –≤–∞–º –ø–æ–∫–∞ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π("
            )

        subperiods = {i["code"]: i["name"] for i in data["subperiods"]}
        subperiods_names = [i["name"] for i in data["subperiods"]]
        len_subperiods_names = len(subperiods_names)
        subperiods_names_first_letter = [i[0] for i in subperiods_names]
        explanation = [
            f"{subperiods_names_first_letter[i]} - {subperiods_names[i]}"
            for i, _ in enumerate(subperiods_names)
        ]
        msg_text = (
            f"–ò—Ç–æ–≥–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏:\n\n{'\n'.join(explanation)}\n\n<pre>\n"
            f"–ü—Ä–µ–¥–º–µ—Ç    ‚îÇ {' | '.join(subperiods_names_first_letter)} |\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº{('‚îÄ‚îÄ‚îÄ‚îº' * len_subperiods_names)[:-1]}‚î§\n"
        )

        subperiod_index = list(subperiods.keys())
        for discipline in data["discipline_marks"]:
            d = _SHORT_LESSONS.get(discipline["discipline"], discipline["discipline"])
            msg_text += f"\n{d:10} ‚îÇ "
            line = ["-"] * len_subperiods_names
            for period_mark in discipline["period_marks"]:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                if period_mark["subperiod_code"] in subperiod_index:
                    line[subperiod_index.index(period_mark["subperiod_code"])] = (
                        period_mark["mark"]
                    )

            msg_text += f"{' ‚îÇ '.join(line)} ‚îÇ"
        return f"{msg_text}</pre>"
